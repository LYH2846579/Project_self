对Tree结构的学习

1.在Order.java中对递归实现前、中、后序遍历进行学习
  1) 首先如何构建起一颗二叉树是关键问题，如何做到有序插入?
       -> 这里使用循环实现，当然也可以使用递归的方法
  2) 使用递归调用的方式，仅需改变结点输出与递归调用本函数的位置即可实现前、中、后序遍历

2.关于实现二叉树的查找问题 -> 在前、中、后序遍历的基础之上稍作修改即可
  1) 在Order.java中对前序查找方式进行实现
  2) 倘若要求将该结点作为返回值进行返回,如何处理return问题 -> (尝试在根节点上加以判断)
    -> 如何使用递归的方式进行实现?   --> 拆分两个函数，第二个进行递归
    -> 当然，也可以使用非递归方式进行   --> while()

附:① 递归+双函数 -> [1] 根据根节点的值和需要查询的值作比较，划分为三种情况
                   [2] 在左右两个子树查询的时候，需要使用递归调用函数(第二个函数)
                   [3] 在编写递归函数的时候可以参考前序遍历递归方式
   ② while()   -> [1] 仍将方法由根节点划分为三部分
                   [2] 某种程度上来说，在左右两个子树中查找的方式类似于镜像模式
   ③ 经数据测试,暂未发现第一种方法的漏洞,第二种有问题!!!!!

3.老师对于查找的实现方式真的是一绝!!!
   -> 使用TreeNode temp 接收从左子树查询的结果!!!
   -> 若不为空则返回,若为空则继续在右子树中进行查找
   -> 返回右子树查询结果!


4.二叉树删除结点
  这里尝试着实现简化的删除方法


5.顺序存储二叉树的实现
  -> 将二叉树存储在数组之中，按照顺序遍历的方式进行存储
  -> 如何实现顺序存储二叉树的前、中、后序遍历   ???
    -> 使用堆栈?
    -> 使用递归?
  在ArrayTree.java中对以上内容进行学习     ->      使用递归实现顺序存储二叉树的三种遍历方式
附:在Order.java中实现层次遍历
   JVM自带的Queue实在太难用了，直接实现链队列    ->使用手写队列成功实现!


