堆栈结构学习

1.堆栈的应用
1)子程序的调用:在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。
2)处理递归调用:和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。
3)表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。
4)二叉树的遍历。
5)图形的深度优先(depth—first)搜索法。

2.在StackArray中将以数组的形式实现栈
① 维护capacity
② 获取栈顶元素和出栈不同!

3.在StackLinkedList中以单链表的形式实现栈
① 维护length用于管理栈内元素数量
② //实际上，应该将入栈口设置于头结点之后!!!

4.在StackTest中
  [1] test1对数组栈进行测试
  [2] test2对链栈进行测试
  [3] test3使用栈实现计算器
      思路：
      ①.通过一个index值（索引），来遍历我们的表达式
      ②.如果我们发现是一个数字,就直接入数栈
      ③.如果发现扫描到是一个符号,就分如下情况
        -> 如果发现当前的符号栈柱为空，就直接入栈
        -> 如果符号栈有操作符，就进行比较:
            -> 如果当前的操作符的优先级小于或者等于楫中的操作符，就需要从数栈中pop出两个数,
            在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈.
            -> 如果当前的操作符的优先级大于栈中的操作符,就直接入符号栈
      ④.当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行.
      ⑤.最后在数栈只有一个数字,就是表达式的结果
      验证:3+2*6-2 =13

  附:① 如何实现数字和字符的识别? String.toCharArray()? 不妨假设只计算一位整数
        附：将char转换为int类型，根据ASCII码的范围判定是否为数字
     ② 如何判别符号的优先级?
        附：由于计算器仅仅实现+、-、*、/四种运算，直接划分得了
     ③ 实现计算时，需注意后出栈的元素位于运算符前!

以上，确实实现了简单一位整数计算器的功能，如何实现两位数及多位数的运算?
想法：如果第一个字符为数字，就将其存入数组中，继续读取下一个字符
     ->若仍为数字 ->继续存入数组
     ->若为字符   -> 将数组中存储的数字依次按照十进制的方式逆序取出
                   -> 输出时以科学计数法的形式输出
附:① 要是第一个为字符咋办 -> 0入数字栈
   ② 在退出循环之后，要分析array中是否还存有元素，若有，将数据取出压入数栈


5.在polandnotation中实现逆波兰表达式计算器
    1)输入逆波兰表达式，使用系统栈进行计算(Stack)
    2)支持小括号和多位数整数
    3)思路分析
    4)代码完成
  附:① 多位整数已在中缀表达式计算器中进行实现，仍采取相关思路即可
     ② 如何支持小括号?

6.学习正则表达式已完成    ->  2021.9.13

7.对逆波兰表达式的计算器实现已经完成 -》2021.9.14


8.栈学习总结：
  1) 栈的实现：无论是链栈还是数组栈，实现基本的功能都不是很难。(注意：链栈应该实现头插比较合适!但是系统栈好像就是以尾插形式实现的！呆)
                                                                                 这里涉及到栈的遍历方式   <-
     以while(!stack.empty)方式进行实现和以for()方式实现的遍历顺序不同!!!    ->  ReversePolishMultiCalc.java

  2) 波兰表达式的计算：前缀表达式     -》  自右向左扫描
     依次遍历表达式，数字 -> 压入栈中
                  运算符 -> 弹出数字进行计算[栈顶元素在前]

  3) 中缀表达式：需要数字栈和符号栈两个!
     依次遍历表达式，数字 -> 压入数字栈中
                       运算符 -> 高优先级 -> 弹出数字进行计算[栈顶元素在后]
                             -> 低优先级 -> 压入符号栈中

  4) 后缀表达式：逆波兰表达式
     计算方式：依次遍历表达式，数字 -> 压入栈中
              运算符 -> 弹出数字进行计算[栈顶元素在运算符后]

  附：中缀表达式转换为后缀表达式
  ① 初始化符号栈operStack和中间结果栈ansStack
  ② 从左至右扫描表达式
  ③ 若遇到操作数 -> 直接压入ansStack
  ④ 若遇到符号
    (1) 若operStack为空或者栈顶元素为"(" -> 直接压入operStack
    (2) 比较和栈顶元素的优先级
        <1> 若该运算符优先级高   ->直接压入operStack
        <2> 否则将栈顶运算符弹出并压入ansStack中，并转到4.1继续与栈顶元素比较
  ⑤ 若遇到括号
    (1) 左括号："(" ->  直接压入operStack
    (2) 右括号：")" ->  将operStack中的元素依次弹出并压入ansStack中，直到遇到"("为止,并将这一对括号丢弃
  ⑥ 重复步骤②-⑤，直到表达式最右边
  ⑦ 将operStack中剩余元素依次弹出并压入ansStack中
  ⑧ 依次将ansStack中元素输出，其 逆序 即为中缀表达式对应的后缀表达式
                               ※














