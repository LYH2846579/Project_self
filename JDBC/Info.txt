对JDBC技术进行详细学习   2021.9.26

1.connection    ConnectionTest.java
  1)使用读取配置文件的形式进行实现(使用FileInputStream获取配置文件)
    将代码与数据进行分离，实现了解耦

2.Statement存在的弊端
  1) 需要进行字符串的拼串操作，过程繁琐
  2) 无法避免SQL注入
     SELECT user,password FROM user_table WHERE user = '"+ user +"' AND password = '"+password+"'"
     一种SQL注入的方式
     SELECT user,password FROM user_table WHERE user = '1' OR ' AND password = '=1 OR '1' = '1';
     即：用户名:1' OR
        密码:=1 OR '1' = '1


3.在PreparedStatementTest.java中对数据库的操作进行实现
  这里对整个连接过程进行复习
   1) 读取配置文件，将所需要的内容读入内存
   2) 根据读取到的内容，建立连接
   3) 创建操纵数据库的sql语句(使用占位符1填充变量)
   4) 从连接对象(connection)中获取preparedStatement对象
   5) 将preparedStatement对象中的占位符进行逐一赋值(使用对应类型的进行赋值,且从1开始)
   6) 执行代码
   7) 进行错误处理try-catch-finally改进代码并将资源关闭

4.是时候简单复习一下MySQL语法了 ->  ?

5.增删改操作     ->      是否可以统一形式化定义?
  1) 获取数据库连接JDBCUtils.java
  2) 预编译sql语句,返回PreparedStatement对象
  3) 填充sql语句中的占位符
  4) 执行sql语句
  5) 关闭资源
  6) 异常处理

6.sql通用的增删改操作   -> PreparedStatementTest.java
  在update()方法中实现了对配置文件中指定数据库中的表的增删改功能
  附: ① SQL语句下标从1开始，一定要在填充占位符的时候小心！
      ② 数据库中的表名最好不要使用关键字(如order),否则在操纵的时候容易出现错误(解决方案为`order`)

7.查询操作(需要存储查询结果)  -> PreparedStatementTest.java
  ① 创建结果集进行存储
  ② 将每一个结果实例化到对应的一个类
  ③ 将类输出
  附:ResultSet.next() -> 判断是否有下一行元素存在,返回boolean,若存在,将指针下移一位

8.通用查询方式
  1) 针对于某一个表的普遍查询方式
  2) 首先使用空参构造器创建对象,接着使用反射获取到对应的属性值,对对应的属性值进行赋值
附:当SQL中列名与JAVA类的属性名不一致时.在SQL语句中添加别名,以适应通过反射获取对象名(起别名)
   ->   获取列的别名 rsmd.getColumnLabel(i+1)

9.在PreparedStatementQueryTest中对针对不同表的查询进行实现
  参数列表: sql+t.Class+Object ... args
  1)首先建立连接 -> 使用配置文件读取的方式Properties等获取用户+类型信息
  2)获取到PreparedStatement的实例化对象ps,加载sql
  3)将占位符依次赋值 -> args
  4)执行sql语句获取到结果集rs
  5)获取结果集的元数据 rsmd
  6)判断rs是否存在下一条记录 -> while(rs.next)
  7)若存在下一条记录，创建空参对象，获取列名和列值 getColumnLabel+getObject
  8)使用反射将对应属性的值赋值   t.getClass().getDeclaredField().var
  9)将对应的对象装载如list中，在执行完上述while语句之后将list返回
  10)进行错误处理及资源关闭

10.在Practise.java中对使用JAVA数据库操作进行练习
   1) 从控制台向数据库的表customer中插入一条数据
    -> 一定小心插入数据时,当未使用到所有的列时的操作 INSERT INTO CUSTOMERS(id,`name`,email,birth) VALUES(?,?,?,?);
    -> 小心Date类型转化问题及插入问题
   2) 创建数据库表examstudent

11.在BlobTest.java中测试使用PreparedStatement操作Blob类型的数据

12.在InsertTest.java中对使用PreparedStatement实现批量插入的功能
   1)addBatch(String):添加需要批量处理的SQL语句或是参数
   2)executeBatch():执行批量处理语句
   3)clearBatch():清空缓存数据

13.在TransactionTest.java中对数据库事务进行学习
   1) 由于在提交之后无法进行rollback，因此使用外部连接方式+手动停止提交操作
   附:由外部传入的Connection在内部无需关闭
   2) 同时对数据库的隔离级别的设置进行学习

14.在BaseDAO.java中实现通用的增删改查操作    version2.0考虑上事务的存在
   1) BaseDAO中针对表的基本操作进行实现(不针对与特殊的表)
   2) 针对于每一个表格，使用接口定义规范，再对其进行实现
   3) 针对一个表格构建其实现类(CustomerDAOImpl.java)
       -> 该实现类继承BaseBAO抽象类,实现CustomerBAO接口中的各种方法
       -> 方法测试时可以在类上使用ctrl+shift+T快捷键
   附:这里注意到，在获取对象的时候出现了Customer.class作为函数参数，尝试使用泛型+反射的方式进行优化
   在Plus包中进行优化
   ① 这里想要删去类属性,就必须在父类中使用泛型以确定针对哪一个表格
   ② 需要在构造子类对象之前就将类别识别出来,这就使得方法不再是泛型方法
   ③ 使用代码块在实例化子类对象的时候默认调用，获取到父类的泛型参数，赋予clazz
   ④ ...    强烈建议聆听JDBC第45讲!!!
   附:复习，对s表构建查询类+接口,针对昨天学习的内容进行详细复习

15.在Database_connection_pool包中对数据库连接池的内容进行学习
   1) 参考Doc文件中的方式进行连接
   2) 使用XML配置文件的时候,需要将其放置在src包下!
   3) DBCP技术暂时省略，着重练习Druid数据库连接池!!!

16.Druid数据库连接池
   1)驱动加载.jar导入
   2)配置文件书写
   3)读取配置文件创建连接

17.Apache-DBUtils实现CRUD操作   apache_dbutils





